{
  "compileOnSave": false,
  "compilerOptions": {
    "experimentalDecorators": true,
    "module": "esnext",
    
    /* トランスパイル後のECMAScriptのバージョン */
    "target": "esnext",

    "jsx": "preserve",
    "lib": ["dom", "es2015", "es2016", "es2017", "es2018"],
    
    /* 相対パスではないモジュールは node_modules 配下を検索する */
    "moduleResolution": "node",

    /* 今回、トランスパイルは Babelが行うので、`tsc`コマンドでJavaScriptファイルを出力しないようにする */
    "noEmit": true,

    /* 厳格な型チェックオプション（noImplicitAny、noImplicitThis、alwaysStrict、
       strictBindCallApply、strictNullChecks、strictFunctionTypes、
       strictPropertyInitialization）を有効化する */
    "strict": true,

    /* 各ファイルを個々のモジュールとしてトランスパイルする。
       Babel では技術的制約で、ネームスペースなどのファイルを跨いだ構文を解釈してトランスパイルできない。
       このオプションを有効にすれば、Babel でトランスパイルできない TypeScriptの構文を検出して警告を出す */
    "isolatedModules": true,

    /* ES modules 形式以外の、CommonJS 形式などのモジュールを default import 形式で読み込める
       例）const module = require('module') -> import module from 'module' */
    "esModuleInterop": true,
    
      "skipLibCheck": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "removeComments": false,
      "preserveConstEnums": true,
      "allowJs": true,
      "moduleResolution": "node",
      "allowSyntheticDefaultImports": true,
      "sourceMap": true,
      "forceConsistentCasingInFileNames": true,
      "resolveJsonModule": true,
  },
  "include": ["src/**/*"]
}
